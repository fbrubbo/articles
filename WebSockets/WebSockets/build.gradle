// Tells gradle it is a war project which will be imported into eclipse wtp
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

// Define souce code compatibility
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Use maven repository
repositories {
    mavenCentral()
}

// Fills out all dependencies which are necessary to start the embedded jetty into our war file
configurations {
	embeddedJetty
}

configurations.all {
	resolutionStrategy {
	  eachDependency { DependencyResolveDetails details ->
		  println details.requested.name + "-" + details.requested.version
		  println details.target.name + "-" + details.target.version
	  }
 
	  // cache dynamic versions for 10 minutes
	  cacheDynamicVersionsFor 10*60, 'seconds'
	  // don't cache changing modules at all
	  cacheChangingModulesFor 0, 'seconds'
	}
  }

dependencies {
	embeddedJetty 'org.eclipse.jetty:jetty-servlet:+'
	embeddedJetty 'org.eclipse.jetty:jetty-webapp:+'
	embeddedJetty 'org.eclipse.jetty:jetty-jsp:+'
	embeddedJetty 'org.eclipse.jetty:jetty-annotations:+'
	// add support for jetty implementation of websockets
	embeddedJetty 'org.eclipse.jetty.websocket:websocket-server:+'
	
	compile 'org.glassfish:javax.json:+'
}


task mytask << {
	println configurations.embeddedJetty.resolutionStrategy.forcedModules
	/*
	configurations.collect {
		println '--' + it
		it.collect(){
			println it
			println it.name
		}
	}
	*/
}

war.baseName = 'WebSockets'
war {
	// unzip and add all jetty dependencies into the root of our war file
	from {configurations.embeddedJetty.collect {
			project.zipTree(it)
		}
	}
	// remove signature and unnecessary files
	exclude "META-INF/*.SF", "META-INF/*.RSA", "about.html", "about_files/**", "readme.txt", "plugin.properties", "jetty-dir.css"

	// include only the classes which will be used to start Embedded Jetty
	from "$buildDir/classes/main"
	exclude "com/myapp/"
	
	// tells the class to run when the generate war be executed using 'java -jar'
	manifest { attributes 'Main-Class': 'com.embedded.JettyStarter' }
}

// Once you will need some basic api (e.i. servlet api) for compilation, add embeddedJetty dependencies for compilation
sourceSets.main.compileClasspath += configurations.embeddedJetty

// the same for eclipse classpath, so you can use it to edit your java files
eclipse {
	classpath {
		plusConfigurations += configurations.embeddedJetty
	}
}
